#include <ShaderCollection.hpp>

std::string ShaderCollection::GetShader(const std::string& type, const std::string& title) {
  std::string shader;
  shader += "#version 330 core\n";

  if (type == "VERTEX") {
    if (title == "BASIC_WITH_TEXTURE") {
      shader += "layout (location = 0) in vec3 aPos;\n"
        "layout (location = 1) in vec3 aCol;\n"
        "layout (location = 2) in vec3 aNormal;\n"
        "layout (location = 3) in vec2 aTex;\n"
        "out vec3 outCol;\n"
        "out vec2 texCoords;\n"
        "out vec3 outNormal;\n"
        "out vec3 fragPos;\n"
        "\n"
        "uniform mat4 model;\n"
        "uniform mat4 vp;\n"
        "\n"
        "void main() {\n"
        "  outCol    = aCol;\n"
        "  texCoords = aTex;\n"
        "  outNormal = mat3(transpose(inverse(model))) * aNormal;\n"
        "  fragPos   = vec3(model * vec4(aPos, 1.0));\n"
        "\n"
        "  gl_Position = vp * vec4(fragPos, 1.0);\n"
        "}";
    } else if (title == "BASIC_WITHOUT_TEXTURE") {
      shader += "layout (location = 0) in vec3 aPos;\n"
        "layout (location = 1) in vec3 aCol;\n"
        "layout (location = 2) in vec3 aNormal;\n"
        "out vec3 outCol;\n"
        "out vec3 outNormal;\n"
        "out vec3 fragPos;\n"
        "\n"
        "uniform mat4 model;\n"
        "uniform mat4 vp;\n"
        "\n"
        "void main() {\n"
        "  outCol    = aCol;\n"
        "  outNormal = mat3(transpose(inverse(model))) * aNormal;\n"
        "  fragPos   = vec3(model * vec4(aPos, 1.0));\n"
        "\n"
        "  gl_Position = vp * vec4(fragPos, 1.0);\n"
        "}";
    } else if (title == "LIGHT") {
      shader += "layout (location = 0) in vec3 aPos;\n"
        "layout (location = 1) in vec3 aNormal;\n"
        "out vec3 outCol;\n"
        "\n"
        "uniform mat4 model;\n"
        "uniform mat4 vp;\n"
        "uniform vec3 color;\n"
        "\n"
        "void main() {\n"
        "  gl_Position = vp * model * vec4(aPos, 1.0);\n"
        "  outCol = color;\n"
        "}";
    }
  } else if (type == "FRAGMENT") {
    if (title == "BASIC_WITH_TEXTURE") {
      shader += "out vec4 FragCol;\n"
        "in vec3 outCol;\n"
        "in vec2 texCoords;\n"
        "in vec3 outNormal;\n"
        "in vec3 fragPos;\n"
        "\n"
        "uniform sampler2D ourTexture;\n"
        "uniform vec3 eyePosition;\n"
        "\n"
        "struct Material {\n"
        "  vec3 ambient;\n"
        "  vec3 diffuse;\n"
        "  vec3 specular;\n"
        "  float shininess;\n"
        "};\n"
        "\n"
        "struct Light {\n"
        "  vec3 position;\n"
        "\n"
        "  vec3 ambient;\n"
        "  vec3 diffuse;\n"
        "  vec3 specular;\n"
        "};\n"
        "\n"
        "uniform Material material;\n"
        "uniform Light light;\n"
        "\n"
        "void main() {\n"
        "  vec3 ambient = light.ambient * material.ambient;\n"
        "\n"
        "  vec3 normal = normalize(outNormal);\n"
        "  vec3 lightDir = normalize(light.position - fragPos);\n"
        "  float diff = max(dot(normal, lightDir), 0.0);\n"
        "\n"
        "  vec3 diffuse = (diff * material.diffuse) * light.diffuse;\n"
        "  vec3 viewDir = normalize(eyePosition - fragPos);\n"
        "  vec3 reflectDir = reflect(-lightDir, normal);  \n"
        "  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);\n"
        "  vec3 specular = (material.specular * spec) * light.specular;  \n"
        "\n"
        "  FragCol = texture(ourTexture, texCoords) * vec4(ambient + diffuse + specular, 1.0);\n"
        "}";
    } else if (title == "BASIC_WITHOUT_TEXTURE") {
      shader +=
        "out vec4 FragCol;\n"
        "in vec3 outCol;\n"
        "in vec3 outNormal;\n"
        "in vec3 fragPos;\n"
        "\n"
        "uniform vec3 lightColor;\n"
        "uniform vec3 eyePosition;\n"
        "\n"
        "struct Material {\n"
        "  vec3 ambient;\n"
        "  vec3 diffuse;\n"
        "  vec3 specular;\n"
        "  float shininess;\n"
        "};\n"
        "\n"
        "struct Light {\n"
        "  vec3 position;\n"
        "\n"
        "  vec3 ambient;\n"
        "  vec3 diffuse;\n"
        "  vec3 specular;\n"
        "};\n"
        "\n"
        "uniform Material material;\n"
        "uniform Light light;\n"
        "\n"
        "void main() {\n"
        "  vec3 ambient = light.ambient * material.ambient;\n"
        "\n"
        "  vec3 normal = normalize(outNormal);\n"
        "  vec3 lightDir = normalize(light.position - fragPos);\n"
        "  float diff = max(dot(normal, lightDir), 0.0);\n"
        "\n"
        "  vec3 diffuse = light.diffuse * (diff * material.diffuse);\n"
        "  vec3 viewDir = normalize(eyePosition - fragPos);\n"
        "  vec3 reflectDir = reflect(-lightDir, normal);  \n"
        "  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);\n"
        "\n"
        "  vec3 specular = light.specular * (material.specular * spec);  \n"
        "\n"
        "  vec3 result = (ambient + diffuse + specular) * outCol;\n"
        "  FragCol = vec4(result, 1.0);\n"
        "}";
    } else if (title == "LIGHT") {
      shader += "out vec4 FragCol;\n"
        "in vec3 outCol;\n"
        "\n"
        "void main() {\n"
        "  FragCol = vec4(outCol, 1.0);\n"
        "}";
    }
  } 

  shader += "\n\0";

  return shader;
}